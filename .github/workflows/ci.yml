name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Python Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: test_db
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio pytest-cov
    
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      working-directory: ./backend
      run: |
        pip install mypy types-requests
        mypy . --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      working-directory: ./backend
      env:
        MONGODB_URL: mongodb://localhost:27017/test_db
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_URL: http://localhost:9200
        AI_DEFAULT_PROVIDER: mock
        VERTEX_AI_PROJECT_ID: test-project
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Node.js Middleware Tests  
  middleware-tests:
    name: Middleware Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './middleware/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./middleware
      run: npm ci
    
    - name: Lint with ESLint
      working-directory: ./middleware
      run: npm run lint || echo "ESLint not configured yet"
    
    - name: Type checking
      working-directory: ./middleware
      run: npm run type-check || echo "TypeScript check not configured yet"
      continue-on-error: true
    
    - name: Run tests
      working-directory: ./middleware
      run: npm test || echo "Tests not configured yet"
      continue-on-error: true

  # Security Scans
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
      continue-on-error: true

  # Docker Build and Test
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    strategy:
      matrix:
        service: [backend, middleware]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        AI_DEFAULT_PROVIDER=local
        MONGODB_URL=mongodb://mongo:27017/test
        ELASTICSEARCH_URL=http://elasticsearch:9200
        REDIS_URL=redis://redis:6379/0
        DEBUG=true
        LOG_LEVEL=info
        JWT_SECRET_KEY=test-secret-key-for-integration-tests-only-minimum-32-chars
        SESSION_SECRET=test-session-secret-for-integration-tests
        USE_LOCAL_LM=1
        EOF
    
    - name: Start services
      run: |
        docker-compose up -d mongo redis elasticsearch
        sleep 20  # Wait for databases to start
        docker-compose up -d backend
        sleep 15  # Wait for backend to start
    
    - name: Wait for services to be ready
      run: |
        # Wait for backend
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "âœ… Backend is ready"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 3
        done
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1
        
        echo "Testing AI providers endpoint..."
        curl -f http://localhost:8000/ai/providers || echo "AI providers endpoint not ready"
        
        echo "Testing chat functionality..."
        curl -X POST http://localhost:8000/chat \
          -H "Content-Type: application/json" \
          -d '{"user_id":"test_user","message":"CzeÅ›Ä‡, czy moÅ¼esz pomÃ³c mi z Minecraft Education?"}' \
          || echo "Chat endpoint not ready yet"
        
        echo "âœ… Integration tests completed"
    
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker-compose logs backend || echo "No backend logs"
        echo "=== MongoDB Logs ==="
        docker-compose logs mongo || echo "No mongo logs"
        echo "=== Elasticsearch Logs ==="
        docker-compose logs elasticsearch || echo "No elasticsearch logs"
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Deploy to Google Cloud (staging)
  deploy-gcp:
    name: Deploy to Google Cloud
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
    
    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy minecraft-ai-backend \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars="AI_DEFAULT_PROVIDER=vertex" \
          --set-env-vars="VERTEX_AI_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" \
          --set-env-vars="DEBUG=false" \
          --set-env-vars="LOG_LEVEL=info"
    
    - name: Deploy Middleware to Cloud Run  
      run: |
        gcloud run deploy minecraft-ai-middleware \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-middleware:latest \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5
    
    - name: Get deployed URLs
      run: |
        BACKEND_URL=$(gcloud run services describe minecraft-ai-backend --region=us-central1 --format='value(status.url)')
        MIDDLEWARE_URL=$(gcloud run services describe minecraft-ai-middleware --region=us-central1 --format='value(status.url)')
        
        echo "ðŸš€ Deployment successful!"
        echo "Backend URL: $BACKEND_URL"
        echo "Middleware URL: $MIDDLEWARE_URL"
        
        # Test deployed services
        curl -f "$BACKEND_URL/health" && echo "âœ… Backend health check passed"
        
        # Save URLs for later use
        echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
        echo "MIDDLEWARE_URL=$MIDDLEWARE_URL" >> $GITHUB_ENV